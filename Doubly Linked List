#include<stdio.h>
#include<stdlib.h>
struct dlist {
    int info;
    struct clist *llink;
    struct clist *rlink;
};
typedef struct dlist *NODE;
NODE getnode() {
    NODE temp;
    temp = (NODE)malloc(sizeof(struct dlist));
    if (temp == NULL) {
        printf("Memory allocation failed..\n");
        return NULL;
    }
    return temp;
}
NODE insrt_front(NODE first, int data) {
    NODE tmp;
    tmp = getnode();
    tmp->info = data;
    tmp->llink = NULL;
    tmp->rlink = first;
        return tmp;
    }
NODE insrt_rear(NODE first, int data) {
    NODE tmp,curr;
    tmp = getnode();
    tmp->info = data;
    tmp->rlink = NULL;
    tmp->llink = NULL;
    if (first == NULL) {
        first = tmp;
        return first;
    }
    curr = first;
    while(curr->rlink!=NULL){
        curr = curr->rlink;
    }
    curr->rlink = tmp;
    tmp->llink=curr;
    return first;
}

NODE delet_rear(NODE first) {
    NODE prev, cur;
    if (first == NULL) {
        printf("List is empty.\n");
        return first;
    }
    if (first->rlink == NULL) {
        printf("Deleted item is %d\n", first->info);
        free(first);
        return NULL;
    }
    cur = first;
    while (cur->rlink != NULL) {
        prev = cur;
        cur = cur->rlink;
    }
    prev->rlink = NULL;
    cur->llink= NULL;
    printf("Deleted item is %d\n", cur->info);
    free(cur);
    return first;
}
NODE delet_front(NODE first) {
    NODE tmp;
    if (first == NULL) {
        printf("List is empty.\n");
        return first;
    }
    if (first->rlink == NULL) {
        printf("Deleted item is %d\n", first->info);
        free(first);
        return NULL;
    }
    tmp = first->rlink;
    tmp->llink = NULL;
    printf("Deleted item is %d\n", first->info);
    free(first);
    return tmp;
}
void display(NODE first) {
    NODE tmp;
    if (first == NULL) {
        printf("List is empty.\n");
        return;
    }
    printf("Contents of list are \n");
    for(tmp = first;tmp!=NULL;tmp=tmp->rlink)
        printf("%d---",tmp->info);
    }
int main() {
    NODE first = NULL;
    int choice, item;
    while (1) {
        printf("1. Insert at the front\n");
        printf("2. Insert at the rear\n");
        printf("3. Delete from the front\n");
        printf("4. Delete from the rear\n");
        printf("5. Display\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter data to insert at the front: ");
                scanf("%d", &item);
                first = insrt_front(first, item);
                break;
            case 2:
                printf("Enter data to insert at the rear: ");
                scanf("%d", &item);
                first = insrt_rear(first, item);
                break;
            case 3:
                first = delet_front(first);
                break;
            case 4:
                first = delet_rear(first);
                break;
            case 5:
                display(first);
                break;
            case 6:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
