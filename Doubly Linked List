#include <stdio.h>
#include <stdlib.h>
struct node {
    int data;
    struct node *next;
    struct node *prev;
};
struct node *head = NULL;
struct node *tail = NULL;
void begin_insert() {
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    printf("\nEnter the data: ");
    scanf("%d", &newnode->data);
    newnode->prev = NULL;
    newnode->next = NULL;
    if (head == NULL) {
        head = newnode;
        tail = newnode;
    } else {
        head->prev = newnode;
        newnode->next = head;
        head = newnode;
    }
}
void last_insert() {
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    printf("\nEnter the data: ");
    scanf("%d", &newnode->data);
    newnode->prev = NULL;
    newnode->next = NULL;
    if (tail == NULL) {
        head = newnode;
        tail = newnode;
    } else {
        tail->next = newnode;
        newnode->prev = tail;
        tail = newnode;
    }
}
void begin_delete() {
    if (head == NULL) {
        printf("List is empty\n");
    } else {
        struct node *temp = head;
        head = head->next;
        if (head != NULL) {
            head->prev = NULL;
        }
        free(temp);
    }
}
void last_delete() {
    if (tail == NULL) {
        printf("List is empty\n");
    } else {
        struct node *temp = tail;
        tail = tail->prev;
        if (tail != NULL) {
            tail->next = NULL;
        }
        free(temp);
    }
}
void display() {
    struct node *temp = head;
    while (temp != NULL) {
        printf("%d\t", temp->data);
        temp = temp->next
    }
}
int main() {
    int choice;
    while (1) {
        printf("1. Insertion at front\n");
        printf("2. Insertion at last\n");
        printf("3. Deletion at front\n");
        printf("4. Deletion at last\n");
        printf("5. Display\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                begin_insert();
                printf("Node is inserted at the front successfully!\n");
                break;
            case 2:
                last_insert();
                printf("Node is inserted at the last successfully!\n");
                break;
            case 3:
                begin_delete();
                printf("Node is deleted from the front successfully!\n");
                break;
            case 4:
                last_delete();
                printf("Node is deleted from the last successfully!\n");
                break;
            case 5:
                printf("\nPrinting values...\n");
                display();
                break;
            case 6:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid input!\n");
        }
    }
    return 0;
}



