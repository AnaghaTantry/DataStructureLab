#include <stdio.h>
#define MAX 5
char queue[MAX];
int front = -1, rear = -1;
int isEmpty() {
    return (front == -1 && rear == -1);
}
int isFull() {
    return (rear + 1) % MAX == front;
}
void insert(char item) {
    if (isFull()) {
        printf("Circular Queue Overflow: Queue is full!\n");
    } else {
        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % MAX;
        }
        queue[rear] = item;
        printf("Element enqueued: %c\n", item);
    }
}
void delete() {
    if (isEmpty()) {
        printf("Circular Queue Underflow: Queue is empty. Cannot dequeue.\n");
    } else {
        char item = queue[front];
        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % MAX;
        }
        printf("Deleted element: %c\n", item);
    }
}
void display() {
    if (isEmpty()) {
        printf("Circular Queue is empty\n");
    } else {
        printf("Circular Queue elements: ");
        int i = front;
        do {
            printf("%c ", queue[i]);
            i = (i + 1) % MAX;
        } while (i != (rear + 1) % MAX);
        printf("\n");
    }
}
int main() {
    int choice,item;
    while (1) {
        printf("\nCircular Queue Menu:\n");
        printf("1. Insert\n2. Delete\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter the character to insert into Circular Queue: ");
                scanf(" %c", &item);
                insert(item);
                break;
            case 2:
                delete();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting the program.\n");
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }
    return 0;
}
