#include <stdio.h>
#include <stdlib.h>
struct node {
    int data;
    struct node *next;
} *top;
void initialize() {
    top = NULL;
}
int isEmpty() {
    return (top == NULL);
}
int peek() {
    return top->data;
}
int getStackSize(struct node *head) {
    if (head == NULL) {
        printf("Error: Invalid stack pointer!\n");
        return -1;
    }
    int length = 0;
    while (head != NULL) {
        head = head->next;
        length++;
    }
    return length;
}
void push(int num) {
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = num;
    if (top == NULL) {
        temp->next = NULL;
        top = temp;
    } else {
        temp->next = top;
        top = temp;
    }
}
void pop() {
    struct node *temp;
    if (isEmpty()) {
        printf("\nStack is Empty\n");
        return;
    } else {
        temp = top;
        top = top->next;
        printf("Removed Element: %d\n", temp->data);
        free(temp);
    }
}
void printStack(struct node *ptr) {
    while (ptr != NULL) {
        printf("%d", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
}
int main() {
    initialize();
    int choice, element;
    while (1) {
        printf("\nStack Operations Menu:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Print Stack\n");
        printf("4. Peek\n");
        printf("5. Get Stack Size\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter element to push: ");
                scanf("%d", &element);
                push(element);
                break;
            case 2:
                pop();
                break;
            case 3:
                printf("Stack as linked List: ");
                printStack(top);
                break;
            case 4:
                if (!isEmpty())
                    printf("Top Element: %d\n", peek());
                else
                    printf("Stack is empty.\n");
                break;
            case 5:
                printf("Stack Size: %d\n", getStackSize(top));
                break;
            case 0:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }

    return 0;
}
